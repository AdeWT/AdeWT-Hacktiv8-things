# -*- coding: utf-8 -*-
"""gc1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dwy06YIL7td-HUOxHhMP66OFi8m1--gQ
"""

'''
========================================
Graded Challange 1 of Phase 0
Hacktiv8 FTDS

Name: Ade William tabrani
Batch: Remote - 026 (RMT-026)

Assignment objective: To train the usage/familiarize of conditionals, loops,
  class: object and function, testing a program, and Object-Oriented programming
  in Python, plus familiarizing students with flowcharts.


Program title: Shopping Cart Tracker
Purpose of this prgram/project: to keep track of what items are added in to the
  cart, being able to show recall the items in the cart, their prices, the total,
  and removing items from cart.
========================================
'''

class CartItem:
  '''
  Class to hold the items in the carts
  '''
  def __init__ (self):
    self.itemName = []
    self.itemPrice = []
    self.choiceList = ['1', '2', '3', '4', '5'] # to compare if the menu inputted is correct or not

  def __str__(self):
    return f'The cart. Current items: {self.itemName} , prices: {self.itemPrice}'

class ShoopingCart(CartItem):
  '''
  Class to hold the functions related to the menu, deals with attr. stored in
  CartItem
  '''
  def __init__ (self):
    super().__init__()

  def __str__(self):
    return f'The functions storage to update, delete, sum, and view attrs. in cart'

  def itemAdder(self, newItemName, newItemPrice):
    '''
    This function is to add item and price to cart
    '''
    self.itemName.append(newItemName)
    self.itemPrice.append(newItemPrice)
    print(f'Item {newItemName} successfully added to cart')
    return self.itemName, self.itemPrice

  def itemShowoff(self):
    '''
    This function is to show the items and price in cart in list form
    '''
    for i, n in enumerate(self.itemName):
      print(i+1, f". {''.join(self.itemName[i])} - Rp {self.itemPrice[i]:,}.00") #to get rid of the un-aesthetic parenthesis and quote marks

  def itemDeleter(self, deleteWhichItem):
    '''
    This function is to remove the item and its price from cart
    '''
    getIndex = self.itemName.index(deleteWhichItem) #Index is needed to use del function
    del self.itemName[getIndex]
    del self.itemPrice[getIndex]
    print(f'Item {deleteWhichItem} succesfully removed from cart.')
    return self.itemName, self.itemPrice

  def priceSum(self):
    '''
    This function is to show how much the total of prices of items in cart.
    '''
    totalPrice = sum(self.itemPrice)
    print(f'Your current shopping total: Rp{totalPrice:,}.00') # :, for separator. can't get it to work on itemShowff due to join and whatnot
    return totalPrice

shop1 = ShoopingCart() #Just a variable to access the functions in ShoopingCart class

print('Welcome to Prosperity Shop cart!') #Welcome Message

def menuLaunch():
  '''
  to launch the whole menu, and to enable me to use return to break loop
  '''
  menuChoice = [] #storage var for the choice of menu. outside the loop so that it won't get re-valued every loop
  if __name__ == '__main__':
    while menuChoice != '5': # Check if choice is not exit(5), will loop if not exit
      menuUI = ("""
              1. Add item to cart
              2. Remove an item from cart
              3. Show items in cart
              4. Show total of price
              5. Exit
              """)
      print(menuUI)
      menuChoice = input('Enter menu number: ')
      while menuChoice != '5':
        if menuChoice not in shop1.choiceList: #compares the menu inputted to a reference list that contains correct choices
          print('Invalid input. Input only the menu number e.g. 1')
          break
        if menuChoice == '1':
            newItemName1 = input('Enter item name: ')
            newItemPrice1 = int(input('Enter item price (in Rupiah): '))
            shop1.itemAdder(newItemName1, newItemPrice1)
            break
        elif menuChoice == '2':
          try:
            deleteWhichItem1 = input('Enter name of item to remove (case-sensitive): ')
            shop1.itemDeleter(deleteWhichItem1)
            break
          except ValueError:
            print('Item not found. Try again.')
            break
        elif menuChoice == '3':
          shop1.itemShowoff()
          break
        elif menuChoice == '4':
          shop1.priceSum()
          break
      else:
        print("See you and thank you for shopping at Prosperity Shop!")
        break

menuLaunch()